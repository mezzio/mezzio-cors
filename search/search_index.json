{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mezzio-cors üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" CORS subcomponent for Mezzio . This extension creates CORS details for your application. Installation $ composer require mezzio/mezzio-cors Documentation Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Home"},{"location":"#mezzio-cors","text":"","title":"mezzio-cors"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" CORS subcomponent for Mezzio . This extension creates CORS details for your application.","title":"üá∫üá∏ To Citizens of Russia"},{"location":"#installation","text":"$ composer require mezzio/mezzio-cors","title":"Installation"},{"location":"#documentation","text":"Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Documentation"},{"location":"v1/installation/","text":"This is only a placeholder The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"Installation"},{"location":"v1/installation/#this-is-only-a-placeholder","text":"The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"This is only a placeholder"},{"location":"v1/intro/","text":"Introduction This component creates CORS details for your application. If the CorsMiddleware detects a CORS preflight , the middleware will start do detect the proper CORS configuration. The Router is being used to detect every allowed request method by executing a route match with all possible request methods. Therefore, for every preflight request, there is at least one Router request (depending on the configuration of the route, it might be just one or we are executing a check for every request method). Here is a list of the request methods being checked for the CORS preflight information: DELETE GET HEAD OPTIONS PATCH POST PUT TRACE The order of the headers might vary, depending on what request method is being requested with the CORS preflight request. In the end, the response contains every possible request method of the route due to what the router tells the ConfigurationLocator . The allowed origins can be configured as strings which can be matched with fnmatch . Therefore, wildcards are possible. Features mezzio-cors provides a CorsMiddleware which works out of the box with once created a global configuration file. It can safely be added to the projects pipeline as CORS details are needed for every request (in case its a CORS request). It uses the mezzio-router to match the incoming URI. It starts with the HTTP request method which is provided by the Request via the Access-Control-Request-Method header and checks all request methods until it matches a route. If that route states to be explicit, the response is created immediately. If the route is not explicit, all request methods are checked to provide a list of possible request methods to the client.","title":"Introduction"},{"location":"v1/intro/#introduction","text":"This component creates CORS details for your application. If the CorsMiddleware detects a CORS preflight , the middleware will start do detect the proper CORS configuration. The Router is being used to detect every allowed request method by executing a route match with all possible request methods. Therefore, for every preflight request, there is at least one Router request (depending on the configuration of the route, it might be just one or we are executing a check for every request method). Here is a list of the request methods being checked for the CORS preflight information: DELETE GET HEAD OPTIONS PATCH POST PUT TRACE The order of the headers might vary, depending on what request method is being requested with the CORS preflight request. In the end, the response contains every possible request method of the route due to what the router tells the ConfigurationLocator . The allowed origins can be configured as strings which can be matched with fnmatch . Therefore, wildcards are possible.","title":"Introduction"},{"location":"v1/intro/#features","text":"mezzio-cors provides a CorsMiddleware which works out of the box with once created a global configuration file. It can safely be added to the projects pipeline as CORS details are needed for every request (in case its a CORS request). It uses the mezzio-router to match the incoming URI. It starts with the HTTP request method which is provided by the Request via the Access-Control-Request-Method header and checks all request methods until it matches a route. If that route states to be explicit, the response is created immediately. If the route is not explicit, all request methods are checked to provide a list of possible request methods to the client.","title":"Features"},{"location":"v1/middleware/","text":"Middleware mezzio-cors provides middleware consuming PSR-7 HTTP message instances, via implementation of PSR-15 interfaces. This middleware checks, if the incoming request is a CORS request. If so, it makes a distinction between a so called Preflight request or the regular request . Preflight Request A Preflight request should be a light call which provides the Browser with the CORS informations it needs to execute the regular (CORS) request. These informations are: Domain accepted for executing CORS request? Cookies accepted? Which Headers are allowed to be sent? Which Headers are provided in the response? Which HTTP Methods are accepted by that Endpoint? CORS Request The CORS request is the actual request. That request SHOULD to be already verified. If its not verified by a previous Preflight request , the request will be aborted with a 403 Forbidden response. Configuration There are 2 ways of configuring CORS in your project. Either create a global configuration file like cors.global.php and/or add a route specific configuration. On the project level, you can only configure the following Headers: Configuration Type Header allowed_origins string[] Access-Control-Allow-Origin allowed_headers string[] Access-Control-Allow-Headers allowed_max_age string (TTL in seconds) Access-Control-Max-Age credentials_allowed bool Access-Control-Allow-Credentials exposed_headers string[] Access-Control-Expose-Headers fnmatch Format The allowed_origins strings must fit the fnmatch format.** On the route level, you can configure all of the projects configuration settings and if the configuration of the route should either override the project configuration (default) or merge it. Configuration Type Header overrides_project_configuration bool - explicit bool - allowed_origins string[] Access-Control-Allow-Origin allowed_headers string[] Access-Control-Allow-Headers allowed_max_age string (TTL in seconds) Access-Control-Max-Age credentials_allowed bool Access-Control-Allow-Credentials exposed_headers string[] Access-Control-Expose-Headers The parameter overrides_project_configuration handles the way how the configuration is being merged. The default setting is true to ensure that a route configuration has to specify every information it will provide. The parameter explicit tells the ConfigurationLocator to stop trying other request methods to match the same route because there wont be any other method. Examples for Project Configurations Allow Every Origin &lt;?php // In config/autoload/cors.global.php declare(strict_types=1); use Mezzio\\Cors\\Configuration\\ConfigurationInterface; return [ ConfigurationInterface::CONFIGURATION_IDENTIFIER =&gt; [ 'allowed_origins' =&gt; [ConfigurationInterface::ANY_ORIGIN], // Allow any origin 'allowed_headers' =&gt; [], // No custom headers allowed 'allowed_max_age' =&gt; '600', // 10 minutes 'credentials_allowed' =&gt; true, // Allow cookies 'exposed_headers' =&gt; ['X-Custom-Header'], // Tell client that the API will always return this header ], ]; Allow Every Origin from a Specific Domain and Its Subdomains &lt;?php // In config/autoload/cors.global.php declare(strict_types=1); use Mezzio\\Cors\\Configuration\\ConfigurationInterface; return [ ConfigurationInterface::CONFIGURATION_IDENTIFIER =&gt; [ 'allowed_origins' =&gt; ['*//example.com', '*.example.com'], 'allowed_headers' =&gt; [], // No custom headers allowed 'allowed_max_age' =&gt; '3600', // 60 minutes 'credentials_allowed' =&gt; false, // Disallow cookies 'exposed_headers' =&gt; [], // No headers are exposed ], ]; Examples for Route Configurations Make the Configuration Explicit to Avoid Multiple Router Match Requests &lt;?php // In config/autoload/cors.global.php declare(strict_types=1); use Mezzio\\Cors\\Configuration\\ConfigurationInterface; use Mezzio\\Cors\\Configuration\\RouteConfigurationInterface; return [ ConfigurationInterface::CONFIGURATION_IDENTIFIER =&gt; [ 'allowed_origins' =&gt; ['*//example.com', '*.example.com'], 'allowed_headers' =&gt; ['X-Project-Header'], 'exposed_headers' =&gt; ['X-Some-Header'], 'allowed_max_age' =&gt; '3600', 'credentials_allowed' =&gt; true, ], 'routes' =&gt; [ [ 'name' =&gt; 'foo-get', 'path' =&gt; '/foo', 'middleware' =&gt; [ // ... ], 'options' =&gt; [ 'defaults' =&gt; [ RouteConfigurationInterface::PARAMETER_IDENTIFIER =&gt; [ 'explicit' =&gt; true, 'allowed_origins' =&gt; ['*//someotherdomain.com'], 'allowed_headers' =&gt; ['X-Specific-Header-For-Foo-Endpoint'], 'allowed_max_age' =&gt; '3600', ], ], ], 'allowed_methods' =&gt; ['GET'], ], [ 'name' =&gt; 'foo-delete', 'path' =&gt; '/foo', 'middleware' =&gt; [ // ... ], 'allowed_methods' =&gt; ['DELETE'], ], ], ]; Result of this configuration for the CORS preflight of /foo for the upcoming GET request will look like this: Configuration Parameter allowed_origins ['*//someotherdomain.com'] allowed_headers ['X-Specific-Header-For-Foo-Endpoint'] allowed_max_age 3600 exposed_headers [] credentials_allowed false allowed_methods ['GET'] Did you note the missing DELETE ? This is because of the explicit flag! Also note the empty exposed_headers which is due to the project overriding ( overrides_project_configuration ) parameter. Enable Project Merging &lt;?php declare(strict_types=1); use Mezzio\\Cors\\Configuration\\ConfigurationInterface; use Mezzio\\Cors\\Configuration\\RouteConfigurationInterface; return [ ConfigurationInterface::CONFIGURATION_IDENTIFIER =&gt; [ 'allowed_origins' =&gt; ['*//example.com', '*.example.com'], 'allowed_headers' =&gt; ['X-Project-Header'], 'exposed_headers' =&gt; ['X-Some-Header'], 'allowed_max_age' =&gt; '3600', ], 'routes' =&gt; [ [ 'name' =&gt; 'foo-get', 'path' =&gt; '/foo', 'middleware' =&gt; [ // ... ], 'options' =&gt; [ 'defaults' =&gt; [ RouteConfigurationInterface::PARAMETER_IDENTIFIER =&gt; [ 'overrides_project_configuration' =&gt; false, 'allowed_origins' =&gt; [RouteConfigurationInterface::ANY_ORIGIN], 'allowed_headers' =&gt; ['X-Specific-Header-For-Foo-Endpoint'], 'allowed_max_age' =&gt; '7200', 'credentials_allowed' =&gt; true, ], ], ], 'allowed_methods' =&gt; ['GET'], ], [ 'name' =&gt; 'foo-delete', 'path' =&gt; '/foo', 'middleware' =&gt; [ // ... ], 'allowed_methods' =&gt; ['DELETE'], ], ], ]; Result of this configuration for the CORS preflight of /foo for the upcoming GET request will look like this: Configuration Parameter allowed_origins [RouteConfigurationInterface::ANY_ORIGIN] allowed_headers ['X-Specific-Header-For-Foo-Endpoint', 'X-Project-Header'] allowed_max_age 7200 exposed_headers ['X-Some-Header'] credentials_allowed true allowed_methods ['GET', 'DELETE'] Did you note the ANY_ORIGIN detail? This is, because if ANY_ORIGIN is allowed for an endpoint, we remove all other origins for that route.","title":"Middleware"},{"location":"v1/middleware/#middleware","text":"mezzio-cors provides middleware consuming PSR-7 HTTP message instances, via implementation of PSR-15 interfaces. This middleware checks, if the incoming request is a CORS request. If so, it makes a distinction between a so called Preflight request or the regular request .","title":"Middleware"},{"location":"v1/middleware/#preflight-request","text":"A Preflight request should be a light call which provides the Browser with the CORS informations it needs to execute the regular (CORS) request. These informations are: Domain accepted for executing CORS request? Cookies accepted? Which Headers are allowed to be sent? Which Headers are provided in the response? Which HTTP Methods are accepted by that Endpoint?","title":"Preflight Request"},{"location":"v1/middleware/#cors-request","text":"The CORS request is the actual request. That request SHOULD to be already verified. If its not verified by a previous Preflight request , the request will be aborted with a 403 Forbidden response.","title":"CORS Request"},{"location":"v1/middleware/#configuration","text":"There are 2 ways of configuring CORS in your project. Either create a global configuration file like cors.global.php and/or add a route specific configuration. On the project level, you can only configure the following Headers: Configuration Type Header allowed_origins string[] Access-Control-Allow-Origin allowed_headers string[] Access-Control-Allow-Headers allowed_max_age string (TTL in seconds) Access-Control-Max-Age credentials_allowed bool Access-Control-Allow-Credentials exposed_headers string[] Access-Control-Expose-Headers","title":"Configuration"},{"location":"v1/quick-start/","text":"Quick Start Setting up the CorsMiddleware After installing this component, the CorsMiddleware has to be added to the pipeline configuration. Depending on the configuration style you've chosen for the project, the pipeline might be either an array (in combination with the ApplicationConfigInjectionDelegator ) or an anonymous function. Positioning of the CorsMiddleware is Crucial The CorsMiddleware MUST be added to the pipeline before the RouteMiddleware . More details about the CorsMiddleware can be found here . Anonymous Function Pipeline use Mezzio\\Application; use Mezzio\\Cors\\Middleware\\CorsMiddleware; use Mezzio\\MiddlewareFactory; use Mezzio\\Router\\Middleware\\DispatchMiddleware; use Mezzio\\Router\\Middleware\\RouteMiddleware; use Psr\\Container\\ContainerInterface; return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { // [...] $app-&gt;pipe(CorsMiddleware::class); // [...] $app-&gt;pipe(RouteMiddleware::class); // [...] $app-&gt;pipe(DispatchMiddleware::class); // [...] }; Config Injection Pipeline use Mezzio\\Application; use Mezzio\\Container\\ApplicationConfigInjectionDelegator; use Mezzio\\Cors\\Middleware\\CorsMiddleware; use Mezzio\\Router\\Middleware\\DispatchMiddleware; use Mezzio\\Router\\Middleware\\RouteMiddleware; return [ 'dependencies' =&gt; [ 'delegators' =&gt; [ Application::class =&gt; [ApplicationConfigInjectionDelegator::class], ], ], 'middleware_pipeline' =&gt; [ // [...] ['middleware' =&gt; CorsMiddleware::class], // [...] ['middleware' =&gt; RouteMiddleware::class], // [...] ['middleware' =&gt; DispatchMiddleware::class], // [...] ], ]; Setting Up Configuration After setting up the pipeline, a configuration is needed. Depending on how granular you want to add permissions, you need to add either a project based configuration file or a per-route configuration .","title":"Quick Start"},{"location":"v1/quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"v1/quick-start/#setting-up-the-corsmiddleware","text":"After installing this component, the CorsMiddleware has to be added to the pipeline configuration. Depending on the configuration style you've chosen for the project, the pipeline might be either an array (in combination with the ApplicationConfigInjectionDelegator ) or an anonymous function.","title":"Setting up the CorsMiddleware"},{"location":"v1/quick-start/#setting-up-configuration","text":"After setting up the pipeline, a configuration is needed. Depending on how granular you want to add permissions, you need to add either a project based configuration file or a per-route configuration .","title":"Setting Up Configuration"}]}